#!/usr/bin/env python3
import argparse
import boto3
import botocore
import yaml


def parse_args():
    parser = argparse.ArgumentParser(
        description='Deploy ZID AWS infrastructure via the command line.'
    )
    parser.add_argument(
        'deployment_type',
        choices=['provision', 'update', 'destroy'],
        help='Deployment type for script to call'
    )
    parser.add_argument(
        'stack_name',
        help='Name of the stack to deploy (must exist in config file)'
    )
    parser.add_argument(
        '--config-file',
        dest='config_file',
        default='config.yml',
        help='File path of configuration file (default is ./config.yml)'
    )
    return parser.parse_args()


def load_config(args):
    with open(args.config_file, 'r') as config_file:
        return yaml.safe_load(config_file)[args.stack_name]


def create_parameters(config, is_net):
    parameters = []
    for key, value in config['inputs'].items():
        parameters.append({
            'ParameterKey': key,
            'ParameterValue': str(value)
        })
    if is_net:
        parameters.append({
            'ParameterKey': 'DBPassword',
            'ParameterValue': input('Enter master database password: ')
        })
    return parameters


def provision_stack(args, config, template):
    try:
        cf.create_stack(
            StackName=args.stack_name,
            TemplateBody=template,
            Capabilities=['CAPABILITY_NAMED_IAM'],
            Parameters=create_parameters(config, config['properties']['type'] == 'net')
        )
    except cf.exceptions.AlreadyExistsException:
        print(
            f'Stack {args.stack_name} already exists. Try updating or destroying the existing stack.')
    except botocore.exceptions.ClientError as e:
        print(f'Unexpected error: {e}')


def update_stack(args, config, template):
    try:
        cf.update_stack(
            StackName=args.stack_name,
            TemplateBody=template,
            Capabilities=['CAPABILITY_NAMED_IAM'],
            Parameters=create_parameters(config, config['properties']['type'] == 'net')
        )
    except botocore.exceptions.ClientError as e:
        print(f'Unexpected error: {e}')


def destroy_stack(args):
    try:
        cf.delete_stack(StackName=args.stack_name)
    except botocore.exceptions.ClientError as e:
        print(f'Unexpected error: {e}')


def main():
    args = parse_args()
    config = load_config(args)
    template_path = f'template/{config["properties"]["type"]}-template.yaml'
    with open(template_path, 'r') as template_file:
        template = template_file.read()
    
    global cf
    cf = boto3.client('cloudformation')

    if args.deployment_type == 'provision':
        provision_stack(args, config, template)
    elif args.deployment_type == 'update':
        update_stack(args, config, template)
    elif args.deployment_type == 'destroy':
        destroy_stack(args)


if __name__=='__main__':
    main()
